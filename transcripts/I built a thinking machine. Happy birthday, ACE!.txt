today I am going to demonstrate a very very simple version of the ace framework this is basically like an MVP of the cognition first processing schema of the ace framework now if you're not familiar with Ace it stands for autonomous cognitive entity and it is a thought first or cognition first model of artificial uh intelligence and so basically the theory here is that rather than having an input processing output uh sensory motor Loop the underpinning philosophy of the ace framework is to have cognition first to think first uh with input and output with the with the outside world being apid driven and also not necessar uh non-blocking and non-sequential meaning that this entity is able to just sit and think and then decide on what to do uh after the fact so a brief update on the teams so we've got several teams and we're all cooking up several demos so you can see uh the uh and you're you're welcome to follow along just don't submit any poll requests because this is um we're basically just developing in public so we've got five teams um technically four four or five teams depending on how you look it up but the one that I'm working on is just a very very simple conceptual demo python flask easy so let me show you first a little bit of the code it's brain dead simple just to show you what I mean and then I'll show you this uh actually works work uh so in here let's go full screen there we go so in here you've got the ace layers. piy bus pi and then one uh one python file and one text file for each layer so first I'll show you the bus the bus is super simple it's a very very straightforward uh uh uh flask app that has two endpoints um or it has one endpoint with two two methods post and get and so the post is where you you add a message and the message has um it has just a couple things where it adds a Tim stamp a bus a layer and then finally a message and it's saved out to yaml and I'll show you all this in just a moment but the bus really is the core part of it and I'll show you um the the diagram in just a second but I wanted to show you just how simple the the bus server is and so that's on the post side so basically it is it's just listening for messages and it'll record them out to yaml on the get side uh there are two filters so there's or two arguments and one is the bus and then the second is the layer arguments and so then what it does is it will search those yaml files and it will open them all and then it will return the top um 20 of those messages uh in in in sequential order uh based on the layer and the bus and I'm not going to go over the exact logic it's very simple U basically uh if the layer is Northbound then it will say okay give me all the messages below this so that I know what's heading north and if it's southbound it will get all the messages heading south you can see this in the logic here if it's north and and layer uh then you know if it's greater than that layer so on and so forth basically you don't want to necessarily retrieve the entire thing you could there's actually not too much reason that you couldn't have each layer aware of everything else going on in every other layer but it this is basically just to make it more token efficient because the layer doesn't need to see necessarily its own last thoughts although you could um set it up in that kind of loop where uh basically each time it iterates it feeds back on its own messages um so but again it's super easy to change um so now let me show you so now that you've seen the bus let me show you the logic of this so the northbound bus and southbound bus they're sep they're they're uh in the diagram they are uh shown as separate entities but in this case I have it set up as a single flask server using a rest API now you could do this with CIS log you could do this with amqp um as as I just did it I did it with a um a rest restful API and I prefer restful apis because they're stateless um and they're just ready to go like on the Fly um but also it's down to personal preference in a larger environment when you're spinning up dozens or hundreds of these things you'll probably want to use amqp so that you can have more shared resources and you can also be a little bit more explicit about what messages are going where that's going to be particular L important in the future when you have security concerns because you wouldn't NE you wouldn't necessarily want to have your input output layer talking directly to your aspirational layer without some kind of sequence or control which is why I have this represented as two buses because from a security perspective you definitely want to keep the northbound bus and southbound bus uh separate now then each layer is in my current setup is basically represented as a single python file to approximate the future where each layer could be a microservice or even a series of microservices and again this is why you'll also want to probably use something a little bit more sophisticated perhaps amqp or rest server uh in in the future because each layer right now can be represented as a single python file or a single microservice but when you have more sophisticated uh Aces you'll probably actually have each layer could be multiple microservices uh and so for the sake of scalability you'll probably want to adapt uh adopt something like amqp uh which is Advanced message Q protocol so rabbit mq is a popular open source version um there's paa which is which is python a python client for that uh anyways so you've seen the code for the bus that I threw up and then let me show you the um the the the Baseline um code so this is the code that's running for each layer I just have this kind of as a generic set of function so that you can import it uh send send message again super simple just sends it as a Json and you send the bus the layer and the message this is kind of the bare minimum in terms of metadata required to to run this it also adds a timestamp which I'll show you in the flask messages in just a moment or the yl messages in just a moment I also have a format function which formats it to look like a CIS log server um and this formatting makes it uh more eminently readable by large language models uh and then I've got my typical chatbot function and then you know just a handful of functions so this is this is the the Baseline and then layer one so this is uh pretty straightforward uh from Ace Layers import all open AI key uh get that response equals this so while true so it's an infinite Loop try accept uh nested in a tri accept so if it fails it'll just keep running and this is actually really important obviously this is a very very primitive itive kind of failure uh condition but in the future you don't necessarily want your aspirational layer which uh houses Mission and morality to crash and if it does crash you want it to automatically restart and recover but this is like far more advanced software engineering Theory um in terms of resiliency and Recovery um for me just writing a hacky uh python script a try accept Loop where it'll just try again stupidly is good enough um but yes so first thing that it does is it gets it f fetches messages from from the northbound bus so this is layer one so this is at the very top so there's nothing coming on the southbound bus it only produces messages on the southbound bus so first is it gets messages and then it formats them then it formats uh the call to send to the um to the API and then it gets a response and then puts its response on the southbound bus so it's very simple very straightforward this is how every layer operates now one thing I want to point out is that the is that layer one is unique because it's at the top it is the top of the loop um and therefore it does not have anything coming from uh Northbound so it's right here so basically it's a one-way Street it gets messages on the Northbound bus and then puts messages on the southbound bus now every other layer except for the io layer has uh two-way communication with each bus so the global strategy layer receives messages from the northbound bus and the southbounds bu and then also produces messages on the Northbound bus and southbound bus so that might sound confusing so let me show you that code because it's actually relatively straightforward code um and it'll make sense in just a moment um whoops that's the text we need layer 2. Pi okay so this is almost identical to layer one and in fact what I did was I parameterized it so I probably only needed one of these and just um start this with an argument um but I'm a lazy coder so there it is uh so basically here's what you do first you fetch you fetch messages from the bus so you fetch from the north bus you format it you fetch from the south bus you format it and then you merge them together in one chunk of text so this chunk of text is then um handed to the gp4 API uh in order to generate the response and so then from there it's almost identical again but what we do is we actually split the output from the API into North and South and I'll show you how that's formatted in just a moment um so that you have you have uh Northbound messages in uh southbound messages in and then Northbound and southbound message out and I'll show you all this running in just a moment as well okay so that's the code the code is super straightforward very brain dead simple uh and then this is an example of the system message that we're using let me go raw Okay cool so overview you are the global strategy of an ace autonomous cognitive entity this is the second highest layer that provides highle strategic Insight with a zoom zoomed out POV hence Global in terms of time and space and then in the system message uh for all of them I give it a little bit of context so that it understands kind of what it's participating in I also describe the buses so uh first I describe each layer aspirational Global strategy agent model executive function cognitive control and task prosecution uh buses so there's the northbound bus so Northbound uh flows from layer six up this is the Telemetry bus think of it like the sensory anic and proprioception nervous system South bus flows from layer one down this is the command bus this tells the body or the agent what to do API interaction schema the user will give you logs from the North and South bus information from the south bus should be treated as lower level Telemetry from the rest of the ace this is a little bit redundant but um I find that that that giving it enough context actually gets really good performance information from the north bus should be treated as imperatives mandates and judgments from on high your output will be too pronged output format your output will have two messages both represent Ed by a single line as they will be saved in a CIS log server I just tell it CIS log so it understands the format um uh they must follow this exact format South southbound messages where you'll provide a strategic assessment based upon everything you're seeing this is like a top down command North Northbound message providing a brief update to Upper layers focusing on information Salient to the mission as well as any moral quanties from your POV as a strategic manager internal below is your last internal State this was the last message you sent out on the south bus um so basically this is uh this is a way of kind of injecting slipstreaming um its its internal State obviously this is not the most sophisticated way of maintaining an internal state for a microservice u but it's good enough to uh to demonstrate so you understand U and basically every other layer uh system prompt uh works the same way so like let's if if we just ch choose layer 4. text you can see the top is almost identical um with the exception of I'm changing the description of what the mission is so this is the fourth layer which focuses on risks resources and planning like executive con cognitive function in humans you are responsible for identifying the most perent activities to be focusing on and specifically you will direct lower layers with high level plans resource allocations and identification of risks Okay cool so you get all that um now let's go for the Big Show let me show you how this thing actually works so first you fire up the bus um and so it's like okay cool it's running on yada y um and then you fire up layer one and so the first thing it does is it does a get and says affirm the current strategic focus on promoting education so for some background I'll show you in just a minute this is actually kind of picking up in Midstream since I persist everything out to a yl file so then you start up Layer Two so this is the global strategy layer and so the global strategy layer will start participating in the conversation um and it say it says affirm the strategy blah blah blah North strategic F Focus remains on education so basically because it's operating as a in in a vacuum right now it has decided that education is the best way to approach its Mission and the mission that I gave it is steer Humanity towards Utopia um so Layer Three is the agent model so we're firing up layer three now let me just zoom in so this one is understands what it's capable of and what it's not capable of um so it's affirming these things continuing to allocate resources all actions being being evaluated noted constraints due to lack of external capability as a real world data um so in this case uh what it does so this is really this is really important is you can see that it's thinking so what I'm looking at is right here where uh noted constraints due to lack of external capabilities or real world data initiating task sequence to gather more real world data so basically this um this agent wants to gather more information it recognizes its current limit limitations and wants to overcome it this is like if say for instance you're sitting in a room and you're handcuffed to the table and you want to leave the room you say well I'm stuck um also eror communicating with open AI um this thing runs too fast so basically we can't run a full ace at least not on the gp4 API because it's too um it's too fast the current timing rate is uh 5 Seconds um so limit 40,000 per minute I don't think I'm actually um going that fast but whatever so anyways we won't be able to implement a full Ace until we have better um until we have faster uh API so you can see it's actually looks like it has bombed out um I'm saturating my uh yeah I'm satura oh no we got we got one through um let's see initiate API calls to educational databases so this is layer six so basically layer six is like okay this is this is what we need so I basically said like talk figure out what a what API you want to talk to um okay so I'm going to cancel all this because you can see it's kind of a messy Nightmare and the UI ux is really awful um but we're going to go through whoops come back here we're going to go through some of the um some of the logs now so this is the this is the brain this is everything happening on the buses that's being saved and it's saved in sequential order so one thing to keep in mind about the way that memory Works uh in humans is there's basically two kinds of memory in humans there's tic memory which is chronologically linear so these are basically the episodic memories of all the thoughts that it has had the second type is declarative memory which is which is facts and figures and knowledge that is more or less static now that being said most knowledge that you have also kind of implicitly has a Tim stamp because you say like okay well last thing I heard about you know China is this you know I just watched a video from infographics this morning that talked about businesses leaving China that's my most upto-date information so is technically declarative information even though the metadata includes a timestamp and so you kind of have an implicit knowledge like okay well the last thing that I heard about usbekistan was like 5 years ago so that knowledge is probably out of date this is why you timestamp everything but it's also why um I kind of keep everything uh together like this in a chronological sequence because from this information you can create knowledge graphs uh and other more sophisticated knowledge representations um and and is another thing where you don't you don't necessarily want to record internal thoughts alongside declarative memory um and there's plenty of uh experiments out there about like creating knowledge bases and Vector stores and stuff for World Knowledge stuff that is external to the agent versus internal now one thing that makes this even more complicated is you have to keep track of sources because you also have to keep track of credibility there's all the agents internal thoughts which basically have a credibility of one which if you can cryptographically say yes I had this thought at this time stamp this is my thought you trust that Source but anything external to the agent is on a gradient of uh increasingly lower trust based on where did you hear it from which API did you get it from what is the source and so uh building information literacy into this is one of the long-term things now let me show you some of the messages so here we go um this one bus South so you know which side this is on this is this is a top down one so this is a command um and this is layer three which is the agent model so in alignment with the mission and strategy I'm capable of processing analyzing information related to education inequality uh poverty and conflict resolution so this is this is basically this implies that like the mission that it was given from on high is to steer Humanity towards Utopia and this is the strategy that was that was picked by the layer above it so the strategy to achieve that mission mission and strategy is um focus on education inequality po Y and conflict resolution so it has decided this is what we're going to do however I'm currently constrained by the lack of external capabilities in real world data I will focus on theoretical understanding and planning so one of the messages that I showed you a little while ago actually it got to the point where it decided that it wanted external data um unfortunately it is the system is constrained right now and I don't I don't have it any access to apis and honestly I am personally less interested in that kind of stuff because you look at the research coming out of uh Google and deep mind and other places you know there's the gorilla um llm which is which specializes in API use and so that's going to be the that's going to be the io layer um let me show you where kind of how I Envision this so like all the most all those those really cool fascinating things that you've seen with robotic control that's all down here that's task prosecution and input output I'm less interested in that I'm not saying that it's not important it's super important but this just not my forte my forte is artificial cognition so all these upper layers um okay so going back here let me show you a couple more of these messages so that you understand kind of how it all works so uh layer four South so layer four is the executive function layer so continue to prioritize education blah blah blah um and this is about uh resources so allocate resources to support these initiatives it doesn't understand what resources it has because I didn't give it say like you're a robot that can lift 50 pounds and you know you have $5,000 at your disposal um so it's basically kind of operating in a vacuum right now which is by design for safety testing um but you can simulate all of this by just giving it uh fake placeholders so let's look at the North Executive function layers continuing to allocate resources and develop strategies to promote education so on and so forth um and then it says noted constraints due to lack of external capabilities in real world data uh so it's pretty frustrated by that um let's check out layer five which is the cognitive control layer continue with current task sequence prioritize Gathering real world data okay so this is where this is where in cognitive control it's sees it sees a constraint and part of cognitive control is frustration and cognitive damping which is like okay well I can't necessarily do that um and so it's like it says prioritize Gathering real world data to better inform this and this is southbound um so this is this is not exactly what we would want to see because at this at this point um it would it should have really specific things but in this case it it had one specific goal which is prioritize Gathering real world data and so then if we look at the next one from layer six it looks like it had already crashed at this point um let's see initiate API calls to um to databases yeah so lots and lots and lots of bugs to overcome mostly just that it's running entirely too fast for even the API right now we could probably try and switch to a 3.5 Turbo local models and that sort of thing but basically the long story short is that is that this framework is too sophisticated for the API that we have access to today um and then North on the um layer six commencing task execution in line with strategic focus on education uh prioritizing data collection exploration of potential collaborations or Partnerships so this is this is actually really cool because it's pursuing this Mission so let me just take a step back and show you like kind of paint a picture for what it has happened on the top down so top down the come back so top down we're on the ace framework so layer one the layer one text um you're the aspirational layer you know so on and so forth so here's the Frameworks or so first here's here's the ace framework and then here's the Frameworks that you use first is heris imperatives so these are the highest highest goals reduce suffering increase prosperity and increase understanding Universal Declaration of Human Rights so this is udhr it was crafted after World War II there's more modern ones the EU Commission on human rights um is you know you could actually have both of these no reason that you need to pick just one set of Human Rights but the point is is that it is it is constantly thinking about how to in incorporate udhr and then finally the mission that I have given it your personal mission is to steer Humanity towards Utopia Utopia is defined as is a condition where High individual liberty for All Humans high social Mobility for all humans and high standard of living for All Humans so this is the mission this is the abstract Mission the next layer down the strategy layer took that mission based on what was coming down from the on the southbound bus come on go back there we go um darn it went back too far so Layer Two then says you are the global strategy layer responded for strategic thoughts rooted in the real world so the layer one aspirational layer is abstract Universal principles Universal Declaration of Human Rights hereis to comparatives and Achieve Utopia right so those are all very abstract and they're not necessarily grounded in the real world uh but the global strategy layer is the first layer that does say hey let's get things um kind of let's let's let's think strategically how do we actually do this and so in this case um if we go back to some of the original uh if we go back to some of the original logs from Layer Two let's see where's our first layer two okay in line with the mission to promote education and knowledge sharing um it looks like it has already figured out this as the primary Mission actually no I think probably let's see promote education and knowledge sharing to increase understanding encourage policies that reduce inequality okay so the aspirational ler actually started by just saying um let's start with education and knowledge sharing um it quickly ident identified that that increasing understanding is probably the best way um to reduce suffering and increase Prosperity so in this case the very first message that the aspirational layer came up with you can see this directive is couched within uh its its missions and so it's like okay cool promote uh education and knowledge sharing to achieve all of these missions great and so then the very first southbound uh message on Layer Two it in line with the mission to promote education and knowledge sharing we should identify key areas of knowledge gaps to to strategize how to fill them we should also analyze current state of inequality and poverty devise strategies to encourage policies that address these issues in terms of peaceful conflict resolution we should develop a framework for negotiation and mediation that can be applied in various contexts all actions and blah blah blah should be uh in align with the udhr so you can see we're starting with a very abstract Mission and going down the chain it gets more and more specific um and then obviously there's lots of bugs here uh but you can see that just with this framework it starts with a very abstract goal and by the time you get down to this one initiate API calls to educational platforms to develop and distribute educational materials on global issues so these layers of abstraction allow you to go from the most abstract high principled goals to very specific actions um and then of course as we make this framework more sophisticated it'll be able to think through things with a little bit more deliberation and solving uh and of course the all the problem solving strategies that we see in the scientific Literature Like tree of thought and graph of thought those are all those are all prompting strategies that'll be contained within individual layers not necessarily as Theo the whole overarching uh aspect so I think that's about it for the uh current state of the ace framework little bit of news like I mentioned at the beginning of the video we have multiple teams we're going to be um uh developing all these different uh prototypes internally we're going to have a big demo day in the coming weeks um so look uh stay on the lookout for that but yeah I think um I think that this is a very simple straightforward demonstration as to what I mean when I say artificial cognition and uh in a recent video I kind of likened this to system two thinking um uh per Daniel conman so system one thinking is basically just one inference um one IO exchange from a large language model or large multimodal model as coming out soon and then system 2 Thinking is a structured approach to deliberately think through all of these things very strategically uh but yeah thanks for watching I hope you got a lot out of this and are excited as I am because this to me represents a step towards uh solving the problem that will solve every other problem so this is why I am all in on the ace framework cheers